<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-12T09:50:00.563Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反混淆工具de4dot的使用</title>
    <link href="http://example.com/2023/05/12/%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%B7%A5%E5%85%B7de4dot%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/05/12/%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%B7%A5%E5%85%B7de4dot%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-05-12T08:39:56.000Z</published>
    <updated>2023-05-12T09:50:00.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的文章中我们讲述了如何利用dnSpy反编译.NET程序,但例子过于简单。</p><p>在非开源作品中绝大多数都进行了代码混淆,例如以下程序:</p><p><img src="/../assets/60c3e3abafcabd75799096417ce6e0c13ab9462c.png"></p><p>这样的代码是难以阅读的,这时候就要用到反混淆工具de4dot</p><h2 id="de4dot安装"><a href="#de4dot安装" class="headerlink" title="de4dot安装"></a>de4dot安装</h2><p>de4dot下载-&gt;<a href="https://github.com/de4dot/de4dot">Click</a></p><p>需要自行编译生成exe文件,解压后根据Visual Studio及SDK版本选择对应sln</p><p><img src="/../assets/8ef306fa6f9bd5110f5174beead20c55b4256328.png" alt="loading-ag-383"></p><p>de4dot.netcore.sln对应.net core2.1及3.1</p><p>de4dot.netframework.sln对应.net framework3.5及4.5</p><p>进入项目后按F6键后进入以下目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解压文件夹名称\Debug\SDK版本文件夹</span><br></pre></td></tr></table></figure><p>例:笔者的SDK版本为.net core3.1,exe文件生成路径为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temp\Debug\netcoreapp3.1</span><br></pre></td></tr></table></figure><p><img src="/../assets/6d16c10184d59b6f4b70963ee972b971a0fc11c2.png"></p><h2 id="de4dot的使用"><a href="#de4dot的使用" class="headerlink" title="de4dot的使用"></a>de4dot的使用</h2><p>win+r -&gt; cmd -&gt; cd到exe文件所在路径,执行以下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">de4dot 你要执行反混淆文件的路径</span><br></pre></td></tr></table></figure><p>这里以反混淆D:\TEMP\Temp.exe为例:</p><p><img src="/../assets/9345db615d3f753219f47920775c55f6923392e3.png"></p><p>在控制台执行以下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">de4dot D:\TEMP\Temp.exe</span><br></pre></td></tr></table></figure><p><img src="/../assets/b6c9589891f635aaa4027a70a36b0b9a7d53cc5f.png">执行完毕后,TEMP内生成了反混淆后的exe文件</p><p><img src="/../assets/6dafd4e21086140973aaca2ce65592ebdf85176e.png"></p><p>在dnSpy中打开该文件,发现混淆已去除</p><p><img src="/../assets/e5244ac2672e1264220b11815f21da09565a66a3.png"></p><h2 id="de4dot扩展使用"><a href="#de4dot扩展使用" class="headerlink" title="de4dot扩展使用"></a>de4dot扩展使用</h2><p>待续…</p><h2 id="后谈"><a href="#后谈" class="headerlink" title="后谈"></a>后谈</h2><p>反混淆仅用于学习,请勿用于暴力破解商业软件。</p><p><img src="/../assets/2023-05-12-17-47-36-image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在之前的文章中我们讲述了如何利用dnSpy反编译.NET程序,但例子过于简单。&lt;/p&gt;
&lt;p&gt;在非开源作品中绝大多数都进行了代码混淆,例如以</summary>
      
    
    
    
    <category term=".NET" scheme="http://example.com/categories/NET/"/>
    
    
    <category term="开发工具" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>WPF中的MVVM模式</title>
    <link href="http://example.com/2023/05/12/WPF%E4%B8%AD%E7%9A%84MVVM%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/05/12/WPF%E4%B8%AD%E7%9A%84MVVM%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-05-12T02:39:56.000Z</published>
    <updated>2023-05-12T09:03:11.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习WPF,发现它和Winform差别还蛮大的,前者是数据驱动而后者是事件驱动。</p><p>Winform中UI层和代码层几乎是不可分的,一旦UI形式改变代码也必须要进行重写。</p><p>而WPF凭借其特性可以通过MVVM模式让数据与UI进行绑定,在UI没有本质改变的情况下重用代码,也就是实现了UI和后端代码的解耦。</p><p>本文将介绍如何不使用MVVM框架实现MVVM模式。</p><h2 id="INotifyPropertyChanged接口"><a href="#INotifyPropertyChanged接口" class="headerlink" title="INotifyPropertyChanged接口"></a>INotifyPropertyChanged接口</h2><p>该接口用于通知属性已变更,每个ViewModel都需要继承INotifyPropertyChanged接口,所以可以声明一个通知基类</p><h5 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h5><ul><li><p>PropertyChanged事件(委托为PropertyChangedEventHandl) </p><p>我们要为其定义一个触发函数  </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NotifycationObject</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RaisePropertyChange</span>(<span class="params">PropertyChangedEventArgs e</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (PropertyChanged != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PropertyChanged.Invoke(<span class="keyword">this</span>,e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>当RaisePropertyChange方法被调用时,PropertyChanged事件将被调用,UI控件能够通过该事件监听到数据变化,从而实现界面更新。</p><h2 id="ICommand接口"><a href="#ICommand接口" class="headerlink" title="ICommand接口"></a>ICommand接口</h2><p>该接口用于将控件与行为的解耦</p><h4 id="成员-1"><a href="#成员-1" class="headerlink" title="成员"></a>成员</h4><ul><li><p>CanExecuteChanged事件(委托为EventHandler)</p><p>该事件被触发时,会通知UI当前命令的可执行状态已更改,从而控制UI状态</p><p>如果你不想改变命令的可执行状态,可以不</p></li><li><p>CanExecute方法</p><p>根据用户传入的方法情况判断是否可以执行命令</p></li><li><p>Execute方法</p><p>该方法用于执行实际操作,根据用户传入的方法情况进行调用</p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DelegateCommand</span> : <span class="title">ICommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler CanExecuteChanged;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要执行的方法 委托类型根据具体方法而定</span></span><br><span class="line">        <span class="keyword">public</span> Action ExecuteAction &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment">//判断是否可以执行的方法 委托类型根据具体方法而定</span></span><br><span class="line">        <span class="keyword">public</span> Func&lt;<span class="built_in">object</span>, <span class="built_in">bool</span>&gt; CanExecuteFunc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DelegateCommand</span>(<span class="params">Action _aciton, Func&lt;<span class="built_in">object</span>, <span class="built_in">bool</span>&gt; _func</span>)</span> &#123;</span><br><span class="line">            ExecuteAction = _aciton;</span><br><span class="line">            CanExecuteFunc = _func;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CanExecute</span>(<span class="params"><span class="built_in">object</span> parameter</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (CanExecuteFunc==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> CanExecuteFunc(parameter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">object</span> parameter</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ExecuteAction==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ExecuteAction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在声明ICommand实现类对象时需要传入具体逻辑方法(ExecuteAction)和是否可执行判断方法(CanExecuteFunc)</p><h2 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h2><p>ViewModel是View和Model的中间层</p><p>View:ViewModle&#x3D;1:1    ViewModel:View&#x3D;N:1    ViewModle:Model&#x3D;1:N</p><p>在set修饰器中通过调用RaisePropertyChange方法来提醒UI进行数据变化</p><p>xaml中绑定AddCommand命令的控件触发命令时会执行Add方法 从而实现双向绑定</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainWindowViewModel</span>:<span class="title">NotifycationObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> input1;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Input1 &#123; </span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> input1; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; </span><br><span class="line">            input1 = <span class="keyword">value</span>;</span><br><span class="line">            RaisePropertyChange(<span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">&quot;Input1&quot;</span>));</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> input2;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Input2</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> input2; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            input2 = <span class="keyword">value</span>;</span><br><span class="line">            RaisePropertyChange(<span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">&quot;Input2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> result;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Result</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="keyword">value</span>;</span><br><span class="line">            RaisePropertyChange(<span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">&quot;Result&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DelegateCommand AddCommand &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Add</span>()</span> &#123;</span><br><span class="line">        Result = Input1 + Input2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindowViewModel</span>()</span> &#123;</span><br><span class="line">        AddCommand = <span class="keyword">new</span> DelegateCommand(Add,(para)=&gt;<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后谈"><a href="#后谈" class="headerlink" title="后谈"></a>后谈</h2><p>虽然实现了双向绑定但代码量有点多,抛开UI非本质大改这种情况感觉并没有减少多少工作量,或许利用MVVM框架会更方便？我不知道。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在学习WPF,发现它和Winform差别还蛮大的,前者是数据驱动而后者是事件驱动。&lt;/p&gt;
&lt;p&gt;Winform中UI层和代码层几乎是不</summary>
      
    
    
    
    <category term=".NET" scheme="http://example.com/categories/NET/"/>
    
    
    <category term="WPF" scheme="http://example.com/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>反编译工具dnSpy的使用</title>
    <link href="http://example.com/2023/05/12/%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7dnSpy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/05/12/%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7dnSpy%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-05-12T02:39:56.000Z</published>
    <updated>2023-05-12T05:00:40.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常能在论坛看到基于.NET平台框架的实用工具,而这些工具往往是非开源的。</p><p>以学习为目的,我们可以通过反编译工具来获取其源码。</p><p>如果安装了Visual Studio,则可以在以下路径找到Microsoft官方的反编译工具ildasm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools</span><br></pre></td></tr></table></figure><p>该工具反编译结果为IL语言,与C#有语法差异,故本文将介绍第三方反编译工具dnSpy的使用</p><h2 id="dnSpy安装"><a href="#dnSpy安装" class="headerlink" title="dnSpy安装"></a>dnSpy安装</h2><p>dnSpy的下载-&gt; <a href="https://github.com/dnSpy/dnSpy/releases/tag/v6.1.8">Click</a> 下载后解压到任意目录即可</p><h2 id="dnSpy使用"><a href="#dnSpy使用" class="headerlink" title="dnSpy使用"></a>dnSpy使用</h2><p>点击dnSpy.exe启动程序</p><p><img src="/../assets/2023-05-12-12-31-12-image.png"></p><p>进入主界面,点击左上角的文件,再点击打开,在弹窗中选择目标文件即可</p><p><img src="/../assets/2023-05-12-12-32-58-image.png"></p><p>这里以笔者的控制台文件为例,通过反编译exe文件获取源码</p><p><img src="/../assets/2023-05-12-12-38-38-image.png"></p><p>在右键菜单,选择你想要编译的部分,这里以编辑类为例</p><p><img src="/../assets/2023-05-12-12-40-07-image.png"></p><p>在弹窗中修改类的内容后点击右下角的编译按钮进行保存</p><p><img src="/../assets/2023-05-12-12-41-50-image.png"></p><p>再次右击,选择调试(根据程序类型选择32bit或64bit版本的dnSpy进行调试)</p><p><img src="/../assets/2023-05-12-12-49-34-image.png"></p><p>在弹出窗口内选择确认后出现运行结果</p><p><img src="/../assets/2023-05-12-12-53-57-image.png"></p><h2 id="后谈"><a href="#后谈" class="headerlink" title="后谈"></a>后谈</h2><p>实际中还会有加密等情况需要依赖反混淆工具。(de4dot)</p><p>反编译仅用于学习,请勿传播未开源项目的反编译结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;经常能在论坛看到基于.NET平台框架的实用工具,而这些工具往往是非开源的。&lt;/p&gt;
&lt;p&gt;以学习为目的,我们可以通过反编译工具来获取其源码。</summary>
      
    
    
    
    <category term=".NET" scheme="http://example.com/categories/NET/"/>
    
    
    <category term="开发工具" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
